import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Future;
import java.io.OutputStream;
import java.util.concurrent.Executors;
import java.io.PrintWriter;
import java.io.IOException;
import java.util.concurrent.ExecutorService;
import java.io.FileInputStream;
import java.util.Arrays;
import java.util.concurrent.Callable;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.BufferedReader;
import java.io.FilenameFilter;
import java.util.Locale;
import java.io.PrintStream;
import java.io.FileOutputStream;
import java.io.File;
import java.util.concurrent.ExecutionException;
import java.util.StringTokenizer;

/**
 * Built using CHelper plug-in
 * Actual solution is at the top
 */
public class Main {
	public static void main(String[] args) {
		Locale.setDefault(Locale.US);
		InputStream inputStream;
		try {
			final String regex = "autocomplete.*strikes.*back.*[.]txt";
			File directory = new File(".");
			File[] candidates = directory.listFiles(new FilenameFilter() {
				public boolean accept(File dir, String name) {
					return name.matches(regex);
				}
			});
			File toRun = null;
			for (File candidate : candidates) {
				if (toRun == null || candidate.lastModified() > toRun.lastModified())
					toRun = candidate;
			}
			inputStream = new FileInputStream(toRun);
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		OutputStream outputStream;
		try {
			outputStream = new FileOutputStream("autocompletestrikesback.out");
		} catch (IOException e) {
			throw new RuntimeException(e);
		}
		InputReader in = new InputReader(inputStream);
		PrintWriter out = new PrintWriter(outputStream);
		AutocompleteStrikesBack solver = new AutocompleteStrikesBack();
		solver.solve(1, in, out);
		out.close();
	}
}

class AutocompleteStrikesBack {
    static class Testcase implements Callable<Testcase> {
        int testNumber;
        int n;
        int k;
        String[] words;
        int res;

        Testcase(int testNumber) {
            this.testNumber = testNumber;
        }

        public void readInput(InputReader in) {
            n = in.nextInt();
            k = in.nextInt();
            words = new String[n];
            for (int i = 0; i < n; ++i) {
                words[i] = in.next();
            }
        }

        static final int INF = (int) 1e9;

        static class Trie {
            Trie[] children = new Trie[26];
            boolean isWord = false;

            public int[] findAll(int count) {
                int[] res = new int[count + 1];
                Arrays.fill(res, INF);
                res[0] = 0;
                if (isWord) {
                    res[1] = 0;
                }
                for (Trie child : children) if (child != null) {
                    int[] cres = child.findAll(count);
                    for (int old = count; old >= 0; --old)
                        for (int take = 1; old + take <= count; ++take) {
                            res[old + take] = Math.min(res[old + take], res[old] + cres[take] + take);
                        }
                }
                res[0] = res[1] = 0;
                return res;
            }
        }

        public Testcase call() {
            Trie root = new Trie();
            for (String w : words) {
                Trie cur = root;
                for (int i = 0; i < w.length(); ++i) {
                    int c = w.charAt(i) - 'a';
                    Trie nxt = cur.children[c];
                    if (nxt == null) {
                        nxt = new Trie();
                        cur.children[c] = nxt;
                    }
                    cur = nxt;
                }
                cur.isWord = true;
            }
            int[] ret = root.findAll(k);
            res = ret[k];
            if (res == 0) res = 1;
            System.err.println("Done test " + testNumber);
            return this;
        }

        public void writeOutput(PrintWriter out) {
            out.println("Case #" + testNumber + ": " + res);
        }
    }

    public void solve(int testNumber, InputReader in, PrintWriter out) {
        int nt = in.nextInt();
        List<Future<Testcase>> tests = new ArrayList<Future<Testcase>>();
        ExecutorService pool = Executors.newFixedThreadPool(8);
        for (int it = 0; it < nt; ++it) {
            Testcase t = new Testcase(it + 1);
            t.readInput(in);
            tests.add(pool.submit(t));
        }
        for (Future<Testcase> test : tests) {
            try {
                Testcase t = test.get();
                t.writeOutput(out);
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            } catch (ExecutionException e) {
                throw new RuntimeException(e);
            }
        }
        pool.shutdown();
    }
}

class InputReader {
    public BufferedReader reader;
    public StringTokenizer tokenizer;

    public InputReader(InputStream stream) {
        reader = new BufferedReader(new InputStreamReader(stream), 32768);
        tokenizer = null;
    }

    public String next() {
        while (tokenizer == null || !tokenizer.hasMoreTokens()) {
            try {
                tokenizer = new StringTokenizer(reader.readLine());
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        return tokenizer.nextToken();
    }

    public int nextInt() {
        return Integer.parseInt(next());
    }

}

