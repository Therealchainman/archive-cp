
#include <bits/stdc++.h>
#include <sys/time.h>

using namespace std;

#define FI first
#define SE second
#define X first
#define Y second
#define ST first
#define ND second
#define MP make_pair
#define PB push_back

typedef long long LL;
typedef vector<int> VI;
typedef long double LD;
typedef pair<int,int> PII;

#define REP(i,n) for(int i=0;i<(n);++i)
#define FOR(i,a,b) for(int i=(a);i<(b);++i)
#define FORE(a,b) for(VAR(a,(b).begin());a!=(b).end();++a)
#define VAR(a,b) __typeof(b) a=(b)
#define ALL(x) (x).begin(),(x).end()
#define CLR(x,a) memset(x,a,sizeof(x))

double getTime() {
	timeval tv;
	gettimeofday(&tv, NULL);
	return tv.tv_sec + tv.tv_usec * 1e-6;
}

struct Aho {
    map<char, Aho*> nx;
    vector<int> dp;
    bool ends;

    Aho() {
        ends = false;
    }

    ~Aho() {
        FORE (it, nx) {
            delete it->second;
        }
    }
};

void insert(Aho *root, char const *s) {
    if (*s == 0) {
        root->ends = true;
        return;
    }
    if (root->nx.find(*s) == root->nx.end()) {
        root->nx[*s] = new Aho();
    }
    insert(root->nx[*s], s + 1);
}

const int INF = (int)1e9;
int n, k;

void go(Aho *t, int depth) {
    t->dp.assign(k + 1, INF);
    t->dp[0] = 0;
    if (t->ends) {
        t->dp[1] = depth;
    }
    FORE (it, t->nx) {
        Aho *son = it->ND;
        go(son, depth + 1);
        for (int i = k; i >= 0; --i) {
            for (int j = 1; i + j <= k; ++j) {
                t->dp[i + j] = min(t->dp[i + j], t->dp[i] + son->dp[j]);
            }
        }
    }
    if (depth > 0) {
        assert(t->dp[1] >= depth);
        t->dp[1] = depth;
    }
}

int alg() {
    Aho *root = new Aho();
    cin >> n >> k;
    FOR (i, 1, n + 1) {
        string s;
        cin >> s;
        insert(root, s.c_str());
    }
    go(root, 0);
    int result = root->dp[k];
    delete root;
    return result;
}

int main() {
    int d;
    cin >> d;
    FOR (i, 1, d + 1) {
        cout << "Case #" << i << ": " << alg() << endl;
    }
}
